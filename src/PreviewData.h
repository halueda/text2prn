/*! @file
  @brief プレビューデータ
  @author 依積晶紀
*/
#pragma once

/************************************************************************/
//! プレビュー用のデータ
/************************************************************************/
class PreviewData
{
  public:
    /************************************************************************/
    //! 出力するテキスト情報
    /*************************************a***********************************/
    struct Text
    {
	int col;	//!< 段
	int line;	//!< 段の中での行
	CString str;	//!< テキスト

	/* ============================================================ */
	/*! @param _col 段
	    @param _line 段の中での行
	    @param _str テキスト					*/
	/* ============================================================ */
	Text(int _col, int _line, const CString& _str) :
		col(_col), line(_line), str(_str)
	{
	}
    };

  private:
    /* ---------------------------------------------------------------- */
    //! プレビューする全テキストデータ
    std::vector<Text> buff_;

    /* ---------------------------------------------------------------- */
    //! 各ページに表示するテキストデータの情報
    /*!
      ページ毎の最初のテキストが格納されている buff_ のインデックスを表す。
      
      nページ目(1〜)に表示するのは、
      buff_[page_marker_[n-1]] 〜 buff_[page_parker_[n]-1] のテキスト。

      page_marker_[n-1] = page_marker_[n] の時、
      nページ目に表示するテキストは無い。
    */
    std::vector<size_t> page_marker_;

  public:
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    //! 総ページ数を取得する。
    /*! @return ページ数
	@pre テキストの設定が完了していること				*/
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    size_t get_page_count() const
    {
	return page_marker_.empty() ? 0 : page_marker_.size() - 1;
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    //! 指定ページ(0〜)に出力するテキストのインデックスを取得する。
    /*!
	[first, second) の区間にある値をインデックスとして
	get_text()で取得できるテキストが、指定ページに出力するテキスト。

	@param [in] page ページ番号(0〜)
	@return 指定ページに出力するテキストの範囲
	@pre テキストの設定が完了していること				*/
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    std::pair<size_t, size_t> get_index(size_t page) const
    {
	ASSERT(!page_marker_.empty());

	if (page + 1 >= page_marker_.size())
	    return std::make_pair(0, 0);

	return std::make_pair(page_marker_[page], page_marker_[page + 1]);
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    //! テキスト取得を取得する。
    /*!
	@param [in] index 取得したいテキストのインデックス
	@return テキスト情報
	@pre indexには、get_index()が返した範囲の値を指定すること。
	@pre テキストの設定が完了していること				*/
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    const Text& get_text(size_t index) const
    {
	ASSERT(!page_marker_.empty());
	ASSERT(index < buff_.size());
	return buff_[index];
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    //! ページが変わったことを記録する。
    /*!
	これを呼び出すごとに改ページとなる。
	@note テキストの設定の開始時と完了後にも１回ずつ呼び出すこと。	*/
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    void markNewPage()
    {
	page_marker_.push_back(buff_.size());
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    //! テキストを設定する。
    /*!
	ページについては、markNewPage() の呼び出し回数で管理する。

	同じページ内なら、col, line の指定順序は任意。
      
	@param [in] col 段落位置(0〜)
	@param [in] line 段落内での行位置(0〜)
	@param [in] text テキスト					*/
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    void addText(int col, int line, const CString& text)
    {
	ASSERT(!page_marker_.empty());
	buff_.push_back(Text(col, line, text));
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    //! データを全てクリアする。
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    void clear()
    {
	buff_.clear();
	page_marker_.clear();
    }
};

