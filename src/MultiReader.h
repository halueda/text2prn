/*! @file
  @brief 複数データ入力
  @author 依積晶紀
*/
#pragma once

#include	"TextReader.h"

/************************************************************************/
//! 複数のテキスト入力ストリームから連続して入力するテキスト入力ストリーム
/************************************************************************/
class MultiReader : public TextReader
{
  public:
    //! 複数のテキストを区切る方法の種類
    enum SeparatorType
    {
	LINE,		//!< 0行以上の空行
	COLUMN,		//!< 改段落
	PAGE,		//!< 改ページ
    };

  private:
    /* ---------------------------------------------------------------- */
    //! 複数のテキストの区切り方
    const SeparatorType type_;

    /* ---------------------------------------------------------------- */
    //! 区切り記号の個数
    /*!
      type_ が LINE 以外は、常に 1
    */
    const size_t num_sep_;

    /* ---------------------------------------------------------------- */
    //! 区切り記号を入力して返す残り個数
    size_t rest_sep_;

    /* ---------------------------------------------------------------- */
    //! get_text()が返すのは区切り記号かどうかのフラグ
    /*!
      true = 区切り記号 \n
      false = 区切り記号ではない
    */
    bool flag_return_separator;
    
    /* ---------------------------------------------------------------- */
    //! 入力中のテキスト入力ストリーム
    /*!
      次のストリームへの切り替え時、および デストラクタで、
      delete する。
    */
    TextReader* reader_;
    
  public:
    MultiReader(SeparatorType = LINE, size_t = 0);
    virtual ~MultiReader();

  public:
    // 次の行へ移動
    bool next();

    // 現在の行を取得
    const Text get_text() const;

  protected:

    /* 〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜 */
    //! 次のテキスト入力ストリームを取得する
    /*!
      全て処理済みの場合は、NULLを返す。

      このメソッドが返すオブジェクトは、
      このクラス（MultiReader）が必要に応じて解放する。

      @return 次に入力対象となるテキスト入力ストリーム
      @exception Error他 テキスト入力ストリームの作成に失敗		*/
    /* 〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜 */
    virtual TextReader* get_next_reader() = 0;
};
